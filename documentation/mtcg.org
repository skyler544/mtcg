#+TITLE: MTCG
:FILE-OPTIONS:
#+STARTUP: fold
#+OPTIONS: toc:nil
#+OPTIONS: num:2
#+OPTIONS: \n:t
#+LATEX_HEADER: \usepackage{helvet}
#+LATEX_HEADER: \renewcommand{\familydefault}{\sfdefault}
#+LATEX_HEADER: \usepackage{nopageno}
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \usepackage[a4paper, margin=2.5cm]{geometry}
:END:

* PROJ [[file:./mtcg.pdf][Monster Card Game]]
DEADLINE: <2023-02-26 Sun 23:55>
:info:
Checklist:
(async-shell-command "chromium https://docs.google.com/spreadsheets/d/1QpgEEVFwCxaCE-Q3iN1O-8myCMOjknp8/edit#gid=231551220")
:end:
** TODO Database [3/4]
:LOGBOOK:
CLOCK: [2023-02-06 Mon 17:13]--[2023-02-06 Mon 18:37] =>  1:24
CLOCK: [2023-02-05 Sun 18:14]--[2023-02-05 Sun 19:49] =>  1:35
CLOCK: [2023-02-05 Sun 15:00]--[2023-02-05 Sun 18:00] =>  3:00
:END:
+ [X] Set up the docker containers
  - [X] postgres
  - [X] adminer
+ [X] Find out how to connect to the database in code
+ [X] Find out how to write prepared statements
  - [X] Prevent SQL injection
    + Using methods such as =setString(foo)= neutralizes the sql injection
      threat by turning even dangerous input into a simple string
  - [X] Take advantage of autocloseable functionality
    + Always use the try-with-resources pattern, taking advantage of the static =HikariDataSource=
+ [ ] Create Schema
** TODO Controllers [1/5]
+ [X] UserController [4/4]
  :LOGBOOK:
  CLOCK: [2023-02-12 Sun 15:57]--[2023-02-12 Sun 16:15] =>  0:18
  CLOCK: [2023-02-12 Sun 10:54]--[2023-02-12 Sun 12:14] =>  1:20
  CLOCK: [2023-02-12 Sun 10:17]--[2023-02-12 Sun 10:46] =>  0:29
  CLOCK: [2023-02-11 Sat 17:53]--[2023-02-11 Sat 22:00] =>  4:07
  :END:
  - [X] POST /users
    + [X] Unit test
  - [X] GET /users/{username}
    + [X] Unit test
  - [X] PUT /users/{username} 
    + [X] Unit test
  - [X] POST /sessions
    + [X] Unit test
+ [ ] PackagesController [0/2]
  - [ ] POST /packages
    + [ ] Unit test
  - [ ] POST /transactions/packages
    + [ ] Unit test
+ [ ] CardsController [0/3]
  - [ ] GET /cards
    + [ ] Unit test
  - [ ] GET /deck
    + [ ] Unit test
  - [ ] PUT /deck
    + [ ] Unit test
+ [ ] GameController [0/3]
  - [ ] GET /stats
    + [ ] Unit test
  - [ ] GET /scoreboard
    + [ ] Unit test
  - [ ] POST /battles
    + [ ] Unit test
+ [ ] TradingController [0/4]
  - [ ] GET /tradings
    + [ ] Unit test
  - [ ] POST /tradings
    + [ ] Unit test
  - [ ] DELETE /tradings/{tradingdealid}
    + [ ] Unit test
  - [ ] POST /tradings/{tradingdealid}
    + [ ] Unit test
** TODO Services [0/5]
+ [ ] UserService
+ [ ] PackagesService
+ [ ] CardsService
+ [ ] GameService
+ [ ] TradingService
** TODO Repositories [0/5]
+ [ ] UserRepository
+ [ ] PackagesRepository
+ [ ] CardsRepository
+ [ ] GameRepository
+ [ ] TradingRepository
** TODO Model [0/5]
+ [ ] UserModel
+ [ ] PackagesModel
+ [ ] CardsModel
+ [ ] GameModel
+ [ ] TradingModel
** TODO Synchronization [0/2]
:info:
https://stackoverflow.com/a/2120409
:end:
+ [ ] Identify critical areas
+ [ ] Use synchronized keyword
** TODO Unit Tests [1/1]
:LOGBOOK:
CLOCK: [2023-02-12 Sun 15:50]--[2023-02-12 Sun 15:56] =>  0:06
CLOCK: [2023-02-11 Sat 10:09]--[2023-02-11 Sat 13:15] =>  3:06
CLOCK: [2023-02-06 Mon 18:37]--[2023-02-06 Mon 18:56] =>  0:19
:END:
+ [X] Find out how to use mocking
